# Generated by AI on 2024-12-19
# Reviewed by: AI Assistant
# Ticket: SFIA-002

# Test script for Haystack Excel converter
# Demonstrates the new XLSXToDocument functionality

import os
import sys
from pathlib import Path

# Add src to path for imports
current_dir = Path(__file__).parent
src_path = current_dir / "src"
sys.path.insert(0, str(src_path))

# Import using absolute paths
from src.infrastructure.persistence.haystack_xlsx_converter import HaystackXlsxConverter
from src.domain.models.document import Document


def test_haystack_converter():
    """Test the Haystack Excel converter functionality."""
    print("Testing Haystack Excel Converter")
    print("=" * 50)
    
    # Initialize converter
    converter = HaystackXlsxConverter()
    
    # Test file path
    excel_file = "doc/sfia-9_current-standard_en_250129.xlsx"
    
    if not os.path.exists(excel_file):
        print(f"‚ùå Excel file not found: {excel_file}")
        return
    
    print(f"üìÅ Processing Excel file: {excel_file}")
    print()
    
    try:
        # Test basic conversion
        print("üîÑ Converting with Haystack XLSXToDocument...")
        documents = converter.convert_file(excel_file)
        
        print(f"‚úÖ Successfully converted to {len(documents)} documents")
        print()
        
        # Display document information
        for i, doc in enumerate(documents, 1):
            print(f"üìÑ Document {i}:")
            print(f"   Content length: {len(doc.content)} characters")
            print(f"   Metadata: {doc.metadata}")
            print(f"   Content preview: {doc.content[:100]}...")
            print()
        
        # Test enhanced conversion
        print("üîÑ Testing enhanced sheet processing...")
        enhanced_docs = converter.convert_with_sheet_processing(excel_file)
        
        print(f"‚úÖ Enhanced conversion produced {len(enhanced_docs)} documents")
        print()
        
        # Show enhanced document example
        if enhanced_docs:
            enhanced_doc = enhanced_docs[0]
            print("üìÑ Enhanced Document Example:")
            print(f"   Content length: {len(enhanced_doc.content)} characters")
            print(f"   Metadata: {enhanced_doc.metadata}")
            print(f"   Content preview: {enhanced_doc.content[:200]}...")
            print()
        
        print("‚úÖ All tests completed successfully!")
        
    except Exception as e:
        print(f"‚ùå Error during conversion: {e}")
        import traceback
        traceback.print_exc()


def test_sheet_count():
    """Test to verify the correct number of sheets."""
    print("\nTesting Sheet Count Verification")
    print("=" * 50)
    
    import openpyxl
    
    excel_file = "doc/sfia-9_current-standard_en_250129.xlsx"
    
    if not os.path.exists(excel_file):
        print(f"‚ùå Excel file not found: {excel_file}")
        return
    
    try:
        wb = openpyxl.load_workbook(excel_file)
        sheet_names = wb.sheetnames
        
        print(f"üìä Excel file contains {len(sheet_names)} sheets:")
        for i, name in enumerate(sheet_names, 1):
            print(f"   {i}. {name}")
        
        print(f"\n‚úÖ Correct sheet count: {len(sheet_names)} sheets")
        
    except Exception as e:
        print(f"‚ùå Error reading Excel file: {e}")


if __name__ == "__main__":
    test_haystack_converter()
    test_sheet_count() 