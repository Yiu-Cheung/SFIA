---
description: Python Architecture Principles
globs:
alwaysApply: false
---
AI-Assisted Python Project Architecture Charter
(Transforming AI from "Single-file Scripts" to "Maintainable, Testable, Extensible" Professional-grade Structure)
──────────────────────────────
Document Version: v1.0
Target Audience: Generative AI (ChatGPT, Copilot, Claude, etc.)
Applicable Projects: Any Python App/API/Batch/Data Science project with >3 core features or expected lifecycle >2 weeks
──────────────────────────────

Architecture Principles (Non-negotiable)
1.1 Any single file >300 lines or single function >50 lines constitutes architectural failure.
1.2 All code must belong to one of four layers: interface, application, domain, infrastructure.
1.3 No direct cross-layer calls: UI must not access databases directly; AI models must not write logs directly.

Four-Layer Folder Structure (Mandatory Scaffolding)
text
project_root/  
├─ src/  
│  ├─ interface/          # 1️⃣ Interface Layer: CLI, REST, Streamlit, Pub/Sub  
│  │  ├─ cli.py  
│  │  ├─ api/  
│  │  │   └─ v1/  
│  │  │       ├─ routes/  
│  │  │       └─ schemas/  
│  │  └─ __init__.py  
│  │  
│  ├─ application/        # 2️⃣ Application Layer: Use Cases / Services  
│  │  ├─ services/  
│  │  ├─ dto/  
│  │  ├─ exceptions.py  
│  │  └─ __init__.py  
│  │  
│  ├─ domain/             # 3️⃣ Domain Layer: Entities, Value Objects, Policies  
│  │  ├─ models/  
│  │  ├─ repositories/    # Interfaces only (no implementations)  
│  │  └─ __init__.py  
│  │  
│  └─ infrastructure/     # 4️⃣ Infrastructure Layer: DB, AI, 3rd-party SDKs, Logging  
│      ├─ persistence/  
│      ├─ ml/  
│      ├─ external/  
│      └─ __init__.py  
│  
├─ tests/                 # Mirror folder structure of src  
├─ scripts/               # One-off scripts, migration scripts  
├─ pyproject.toml / requirements*.txt  
└─ README.md  
File & Code Standards
3.1 Every file must begin with AI-generated "Layer Annotation":

python
# Layer: application  
# Responsibility: Orchestrate model predictions and persistence  
# Public API: PredictionService.predict()  
3.2 All public functions require type hints and docstrings (Google Style).
3.3 No business logic in init.py; only "export lists" permitted.

Dependency Management & Packaging
4.1 Use pyproject.toml + poetry/pdm; prohibit coexistence of requirements.txt and setup.py.
4.2 Grouped dependencies:

toml
[tool.poetry.dependencies]  
python = "^3.10"  
pydantic = "^2.0"          # interface  
sqlalchemy = "^2.0"        # infrastructure  

[tool.poetry.group.dev.dependencies]  
pytest = "^7.4"  
ruff = "^0.4"  
4.3 Packaging must produce project-name-{version}.whl with single CLI entry point:

toml
[tool.poetry.scripts]  
myapp = "src.interface.cli:main"  
Testing Strategy
5.1 Test pyramid ratio:

70% Unit tests (pytest with mocked external dependencies)

20% Integration tests (TestClient + temporary DB)

10% E2E tests (Playwright/Selenium)

5.2 Every PR must maintain ≥80% coverage; CI blocks below threshold.

AI Code Generation SOP
6.1 AI must first produce "Layer Mapping Table" and "Folder Structure" for human review before scaffolding.
6.2 Feature addition workflow:
① Write Use Case in application/ → ② Add Entity in domain/ → ③ Add route in interface/ → ④ Implement in infrastructure/.

6.3 Prohibit global and from module import *.
6.4 AI must prepend "Change Log" block to generated files:

python
# Generated by AI on 2024-07-23  
# Reviewed by: <reviewer_name>  
# Ticket: JIRA-1234  
Static Analysis & Auto-formatting
Linter: ruff (replaces flake8 + isort + pydocstyle)

Formatter: black

Type checking: mypy --strict

Enforce all three via pre-commit (reject commits on failure).

Logging & Monitoring
8.1 Use structlog exclusively (JSON output).
8.2 Interface layer only handles: "receive request → log → return response"; errors translate to HTTP 4xx/5xx.
8.3 Provide get_logger(name) in infrastructure.logging; prohibit direct import logging.

Configuration Management
Use pydantic-settings for .env and YAML (fixed path: config/settings.yaml).

Environment variables prefix: MYAPP_; prohibit hardcoded paths/keys.

Version & Branch Strategy
Trunk-Based Development: main branch, feat/xxx branches, hotfix/xxx branches.

AI-generated code requires PR → CI → ≥1 review → merge.

──────────────────────────────
Appendix: AI Prompt Template
(Paste at beginning of each conversation to enforce compliance)

"You are now a 'Professional Python Architect'.
Strictly follow these rules:

Output overall folder structure before code.

Prefix files with layer annotations and change logs.

No single file >300 lines.

Use four-layer architecture: interface/application/domain/infrastructure.

All public functions require type hints and docstrings."

