# Generated by AI on 2024-12-19
# Reviewed by: AI Assistant
# Ticket: SFIA-003

# Layer: infrastructure
# Responsibility: Convert Excel files to Haystack documents using XLSXToDocument
# Public API: HaystackXlsxConverter.convert_file(), HaystackXlsxConverter.convert_folder()

import os
from typing import List, Optional

from haystack.components.converters import XLSXToDocument
from haystack import Document as HaystackDocument

from ...domain.models.document import Document


class HaystackXlsxConverter:
    """Infrastructure component for converting Excel files to documents using Haystack."""
    
    def __init__(self) -> None:
        """Initialize the Haystack XLSX converter."""
        self._converter = XLSXToDocument()
    
    def convert_file(self, file_path: str, meta: Optional[dict] = None) -> List[Document]:
        """
        Convert a single Excel file to domain documents.
        
        Args:
            file_path: Path to the Excel file
            meta: Optional metadata to attach to all documents
            
        Returns:
            List of domain Document objects
            
        Raises:
            FileNotFoundError: If the file doesn't exist
            ValueError: If the file is not a valid Excel file
        """
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Excel file not found: {file_path}")
        
        if not file_path.lower().endswith(('.xlsx', '.xls')):
            raise ValueError(f"File must be an Excel file (.xlsx or .xls): {file_path}")
        
        # Get actual sheet count first
        import openpyxl
        wb = openpyxl.load_workbook(file_path)
        actual_sheet_count = len(wb.sheetnames)
        sheet_names = wb.sheetnames
        
        # Prepare metadata with explicit sheet information
        base_meta = {
            "source": file_path,
            "type": "excel",
            "converter": "haystack_xlsx",
            "actual_sheet_count": actual_sheet_count,
            "sheet_names": sheet_names,
            "excel_structure_info": f"This Excel file contains exactly {actual_sheet_count} sheets: {', '.join(sheet_names)}"
        }
        if meta:
            base_meta.update(meta)
        
        try:
            # Convert using Haystack XLSXToDocument
            results = self._converter.run(
                sources=[file_path],
                meta=base_meta
            )
            
            # Convert Haystack documents to domain documents with enhanced metadata
            domain_documents = []
            for haystack_doc in results["documents"]:
                # Add explicit sheet count information to prevent AI confusion
                enhanced_metadata = haystack_doc.meta.copy()
                enhanced_metadata.update({
                    "actual_sheet_count": actual_sheet_count,
                    "sheet_names": sheet_names,
                    "excel_structure_info": f"This Excel file contains exactly {actual_sheet_count} sheets: {', '.join(sheet_names)}"
                })
                
                # Add sheet count information to content to help AI understand
                sheet_info = f"\n\n[EXCEL STRUCTURE INFO: This file contains exactly {actual_sheet_count} sheets: {', '.join(sheet_names)}]\n"
                enhanced_content = haystack_doc.content + sheet_info
                
                domain_doc = Document(
                    content=enhanced_content,
                    metadata=enhanced_metadata
                )
                domain_documents.append(domain_doc)
            
            return domain_documents
            
        except Exception as e:
            raise ValueError(f"Failed to convert Excel file {file_path}: {str(e)}")
    
    def convert_folder(self, folder_path: str, meta: Optional[dict] = None) -> List[Document]:
        """
        Convert all Excel files in a folder to domain documents.
        
        Args:
            folder_path: Path to the folder containing Excel files
            meta: Optional metadata to attach to all documents
            
        Returns:
            List of domain Document objects
            
        Raises:
            FileNotFoundError: If the folder doesn't exist
        """
        if not os.path.exists(folder_path):
            raise FileNotFoundError(f"Folder not found: {folder_path}")
        
        all_documents = []
        
        for filename in os.listdir(folder_path):
            if filename.lower().endswith(('.xlsx', '.xls')):
                file_path = os.path.join(folder_path, filename)
                
                # Add file-specific metadata
                file_meta = meta.copy() if meta else {}
                file_meta["filename"] = filename
                
                try:
                    documents = self.convert_file(file_path, file_meta)
                    all_documents.extend(documents)
                except Exception as e:
                    print(f"Warning: Failed to convert {filename}: {e}")
                    continue
        
        return all_documents
    
    def convert_with_sheet_processing(self, file_path: str, meta: Optional[dict] = None) -> List[Document]:
        """
        Convert Excel file with enhanced sheet processing for SFIA skills.
        
        Args:
            file_path: Path to the Excel file
            meta: Optional metadata to attach to all documents
            
        Returns:
            List of domain Document objects with enhanced SFIA processing
        """
        base_documents = self.convert_file(file_path, meta)
        enhanced_documents = []
        
        for doc in base_documents:
            # Check if this is a Skills sheet document
            if "sheet" in doc.metadata and "Skills" in str(doc.metadata.get("sheet", "")):
                # Process skills sheet with enhanced formatting
                enhanced_doc = self._enhance_skills_document(doc)
                enhanced_documents.append(enhanced_doc)
            else:
                enhanced_documents.append(doc)
        
        return enhanced_documents
    
    def _enhance_skills_document(self, document: Document) -> Document:
        """
        Enhance a skills document with better formatting for AI processing.
        
        Args:
            document: Original document from Excel conversion
            
        Returns:
            Enhanced document with better formatting
        """
        content = document.content
        
        # Add SFIA-specific formatting with explicit sheet count
        sheet_count = document.metadata.get("actual_sheet_count", "unknown")
        sheet_names = document.metadata.get("sheet_names", [])
        
        enhanced_content = f"""SFIA Skills Document
{'='*50}

EXCEL FILE STRUCTURE: This file contains exactly {sheet_count} sheets: {', '.join(sheet_names)}

{content}"""
        
        # Create enhanced metadata
        enhanced_metadata = document.metadata.copy()
        enhanced_metadata["enhanced"] = True
        enhanced_metadata["sfia_processed"] = True
        
        return Document(
            content=enhanced_content,
            metadata=enhanced_metadata
        ) 