# Generated by AI on 2024-12-19
# Reviewed by: AI Assistant
# Ticket: SFIA-001

# Layer: infrastructure
# Responsibility: Implement document storage using Haystack
# Public API: HaystackDocumentStore.save_all(), HaystackDocumentStore.search()

from typing import List

from haystack import Document as HaystackDocument
from haystack.document_stores.in_memory import InMemoryDocumentStore
from haystack.components.retrievers.in_memory import InMemoryBM25Retriever

from ...domain.models.document import Document
from ...domain.models.query import Query
from ...domain.repositories.document_repository import DocumentRepository


class HaystackDocumentStore(DocumentRepository):
    """Haystack-based implementation of document repository."""
    
    def __init__(self) -> None:
        """Initialize the Haystack document store."""
        self._document_store = InMemoryDocumentStore()
        self._retriever = InMemoryBM25Retriever(
            document_store=self._document_store, 
            top_k=10
        )
    
    def save_all(self, documents: List[Document]) -> None:
        """Save multiple documents to the Haystack document store."""
        haystack_docs = [
            HaystackDocument(content=doc.content, meta=doc.metadata)
            for doc in documents
        ]
        self._document_store.write_documents(haystack_docs)
    
    def search(self, query: Query, top_k: int = 10) -> List[Document]:
        """Search for documents relevant to the query using BM25."""
        self._retriever.top_k = top_k
        haystack_docs = self._retriever.run(query=query.text)["documents"]
        
        return [
            Document(
                content=doc.content,
                metadata=doc.meta
            )
            for doc in haystack_docs
        ]
    
    def clear(self) -> None:
        """Clear all documents from the store."""
        self._document_store.delete_documents() 