# Generated by AI on 2024-12-19
# Reviewed by: AI Assistant
# Ticket: SFIA-002

# Layer: infrastructure
# Responsibility: Convert XLSX files to Haystack Documents using optimized format for AI reading
# Public API: XLSXDocumentConverter.convert_file()

from typing import List, Dict, Any, Optional
from pathlib import Path
import os

from haystack.components.converters.xlsx import XLSXToDocument
from haystack import Document

from ...domain.models.document import Document as DomainDocument


class XLSXDocumentConverter:
    """Converts XLSX files to Haystack Documents optimized for AI reading."""
    
    def __init__(
        self,
        table_format: str = "markdown",
        sheet_name: Optional[str] = None,
        read_excel_kwargs: Optional[Dict[str, Any]] = None,
        table_format_kwargs: Optional[Dict[str, Any]] = None,
        store_full_path: bool = False,
        save_debug_files: bool = True,
        debug_folder: str = "doc/.converted"
    ) -> None:
        """Initialize the XLSX document converter.
        
        Args:
            table_format: Output format ('csv' or 'markdown'). Markdown is preferred for AI reading.
            sheet_name: Sheet name to process. If None, processes all sheets.
            read_excel_kwargs: Additional arguments for pandas.read_excel.
            table_format_kwargs: Additional arguments for table format conversion.
            store_full_path: Whether to store full file path in metadata.
            save_debug_files: Whether to save converted documents to debug folder.
            debug_folder: Folder to save debug files.
        """
        self._converter = XLSXToDocument(
            table_format=table_format,
            sheet_name=sheet_name,
            read_excel_kwargs=read_excel_kwargs,
            table_format_kwargs=table_format_kwargs,
            store_full_path=store_full_path
        )
        self._table_format = table_format
        self._store_full_path = store_full_path
        self._save_debug_files = save_debug_files
        self._debug_folder = debug_folder
        
        # Create debug folder if needed
        if self._save_debug_files:
            os.makedirs(self._debug_folder, exist_ok=True)
    
    def convert_file(self, file_path: str) -> List[DomainDocument]:
        """Convert an XLSX file to domain documents.
        
        Args:
            file_path: Path to the XLSX file.
            
        Returns:
            List of domain documents converted from the XLSX file.
        """
        if not Path(file_path).exists():
            raise FileNotFoundError(f"XLSX file not found: {file_path}")
        
        # Convert using Haystack component
        haystack_docs = self._converter.run(sources=[file_path])
        
        # Convert Haystack documents to domain documents
        domain_docs = []
        for i, doc in enumerate(haystack_docs.get("documents", [])):
            domain_doc = self._convert_haystack_to_domain(doc, file_path, i)
            domain_docs.append(domain_doc)
            
            # Save debug file if enabled
            if self._save_debug_files:
                self._save_debug_file(domain_doc, file_path, i)
        
        return domain_docs
    
    def convert_files(self, file_paths: List[str]) -> List[DomainDocument]:
        """Convert multiple XLSX files to domain documents.
        
        Args:
            file_paths: List of paths to XLSX files.
            
        Returns:
            List of domain documents converted from all XLSX files.
        """
        all_docs = []
        for file_path in file_paths:
            try:
                docs = self.convert_file(file_path)
                all_docs.extend(docs)
            except Exception as e:
                print(f"Failed to convert {file_path}: {e}")
                continue
        
        return all_docs
    
    def _convert_haystack_to_domain(self, haystack_doc: Document, file_path: str, doc_index: int) -> DomainDocument:
        """Convert a Haystack document to a domain document.
        
        Args:
            haystack_doc: Haystack document to convert.
            file_path: Original file path for metadata.
            doc_index: Index of the document for debugging.
            
        Returns:
            Domain document with optimized content for AI reading.
        """
        # Extract metadata
        metadata = {
            "source": file_path,
            "type": "xlsx",
            "format": self._table_format,
            "doc_index": doc_index
        }
        
        # Add sheet-specific metadata if available
        if hasattr(haystack_doc, 'meta'):
            sheet_meta = haystack_doc.meta
            if sheet_meta:
                metadata.update({
                    "sheet_name": sheet_meta.get("sheet_name", "unknown"),
                    "file_path": sheet_meta.get("file_path", file_path)
                })
        
        # Optimize content for AI reading
        optimized_content = self._optimize_content_for_ai(haystack_doc.content)
        
        return DomainDocument(
            content=optimized_content,
            metadata=metadata
        )
    
    def _save_debug_file(self, domain_doc: DomainDocument, file_path: str, doc_index: int) -> None:
        """Save a converted document to debug folder for examination.
        
        Args:
            domain_doc: Domain document to save.
            file_path: Original file path.
            doc_index: Index of the document.
        """
        try:
            # Create filename based on original file and document index
            original_filename = Path(file_path).stem
            sheet_name = domain_doc.metadata.get("sheet_name", f"sheet_{doc_index}")
            
            # Create safe filename
            safe_sheet_name = "".join(c for c in sheet_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
            safe_sheet_name = safe_sheet_name.replace(' ', '_')
            
            debug_filename = f"{original_filename}_{safe_sheet_name}_{doc_index}.{self._table_format}"
            debug_filepath = os.path.join(self._debug_folder, debug_filename)
            
            # Save content to file
            with open(debug_filepath, 'w', encoding='utf-8') as f:
                f.write(f"# Converted from: {file_path}\n")
                f.write(f"# Sheet: {sheet_name}\n")
                f.write(f"# Format: {self._table_format}\n")
                f.write(f"# Metadata: {domain_doc.metadata}\n")
                f.write(f"# Content Length: {len(domain_doc.content)} characters\n")
                f.write("\n" + "="*80 + "\n\n")
                f.write(domain_doc.content)
            
            print(f"ðŸ’¾ Saved debug file: {debug_filename}")
            
        except Exception as e:
            print(f"Failed to save debug file: {e}")
    
    def _optimize_content_for_ai(self, content: str) -> str:
        """Optimize content format for better AI comprehension.
        
        Args:
            content: Raw content from XLSX conversion.
            
        Returns:
            Optimized content for AI reading.
        """
        if not content:
            return ""
        
        # For markdown format, add structure hints
        if self._table_format == "markdown":
            # Add section headers if not present
            if not content.startswith("#"):
                lines = content.split('\n')
                if lines and lines[0].strip():
                    # Add header for the first non-empty line
                    content = f"# {lines[0].strip()}\n\n" + '\n'.join(lines[1:])
        
        # Clean up excessive whitespace
        content = '\n'.join(line.rstrip() for line in content.split('\n'))
        
        # Remove empty lines at the beginning and end
        content = content.strip()
        
        return content 