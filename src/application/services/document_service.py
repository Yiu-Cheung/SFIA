# Generated by AI on 2024-12-19
# Reviewed by: AI Assistant
# Ticket: SFIA-001

# Layer: application
# Responsibility: Orchestrate document loading and storage operations
# Public API: DocumentService.load_from_folder(), DocumentService.get_documents()

import os
from typing import List

import pandas as pd

from ...domain.models.document import Document
from ...domain.models.query import Query
from ...domain.repositories.document_repository import DocumentRepository


class DocumentService:
    """Application service for document operations."""
    
    def __init__(self, document_repository: DocumentRepository) -> None:
        """Initialize the document service."""
        self._document_repository = document_repository
    
    def load_from_folder(self, folder_path: str) -> List[Document]:
        """Load documents from a folder containing txt and Excel files."""
        if not os.path.exists(folder_path):
            raise FileNotFoundError(f"Folder not found: {folder_path}")
        
        documents = []
        
        for filename in os.listdir(folder_path):
            file_path = os.path.join(folder_path, filename)
            
            if filename.endswith('.txt'):
                documents.extend(self._load_txt_file(file_path))
            elif filename.endswith(('.xlsx', '.xls')):
                documents.extend(self._load_excel_file(file_path))
        
        if documents:
            self._document_repository.save_all(documents)
        
        return documents
    
    def _load_txt_file(self, file_path: str) -> List[Document]:
        """Load content from a text file."""
        documents = []
        try:
            with open(file_path, encoding='utf-8') as f:
                content = f.read().strip()
                if content:
                    documents.append(Document(
                        content=content,
                        metadata={"source": file_path, "type": "txt"}
                    ))
        except Exception as e:
            print(f"Failed to read {file_path}: {e}")
        
        return documents
    
    def _load_excel_file(self, file_path: str) -> List[Document]:
        """Load content from an Excel file."""
        documents = []
        try:
            df = pd.read_excel(
                file_path, 
                engine='openpyxl' if file_path.endswith('.xlsx') else None
            )
            
            # Combine all non-empty content into one document
            all_content = []
            for column in df.columns:
                for value in df[column]:
                    content = str(value).strip()
                    if content and content.lower() != 'nan':
                        all_content.append(content)
            
            if all_content:
                # Create one document with all content combined
                combined_content = "\n".join(all_content)
                documents.append(Document(
                    content=combined_content,
                    metadata={"source": file_path, "type": "excel", "rows_processed": len(df)}
                ))
        except Exception as e:
            print(f"Failed to read {file_path}: {e}")
        
        return documents
    
    def get_documents(self) -> List[Document]:
        """Get all documents from the repository."""
        # This is a simplified implementation - in a real scenario,
        # you might want to implement pagination or filtering
        return self._document_repository.search(
            Query(""), 
            top_k=1000  # Large number to get all documents
        ) 