# Generated by AI on 2024-12-19
# Reviewed by: AI Assistant
# Ticket: SFIA-004

# Layer: application
# Responsibility: Provide direct, accurate answers for specific content questions
# Public API: ContentValidationService.get_direct_answer()

import os
import pandas as pd
from typing import Optional, Dict, Any

class ContentValidationService:
    """Application service for direct content validation and answers."""
    def __init__(self) -> None:
        """Initialize the content validation service."""
        pass

    def get_direct_answer(self, question: str, file_path: str) -> Optional[str]:
        """
        Get a direct, accurate answer for specific content questions.
        Args:
            question: The question to answer
            file_path: Path to the Excel file
        Returns:
            Direct answer if the question can be answered directly, None otherwise
        """
        question_lower = question.lower()
        # Check for first skill questions
        if self._is_first_skill_question(question_lower):
            return self._get_first_skill_answer(file_path)
        # Check for skill count questions
        if self._is_skill_count_question(question_lower):
            return self._get_skill_count_answer(file_path)
        # Check for specific skill questions
        if self._is_specific_skill_question(question_lower):
            return self._get_specific_skill_answer(question_lower, file_path)
        return None

    def _is_first_skill_question(self, question: str) -> bool:
        first_skill_keywords = [
            "first skill", "first skill in", "what is the first skill",
            "first skill in the skills sheet", "first skill in skills"
        ]
        return any(keyword in question for keyword in first_skill_keywords)

    def _is_skill_count_question(self, question: str) -> bool:
        skill_count_keywords = [
            "how many skills", "number of skills", "skill count",
            "total skills", "count of skills"
        ]
        return any(keyword in question for keyword in skill_count_keywords)

    def _is_specific_skill_question(self, question: str) -> bool:
        # This could be expanded to handle specific skill lookups
        return False

    def _get_first_skill_answer(self, file_path: str) -> str:
        try:
            df = pd.read_excel(file_path, sheet_name='Skills')
            skill_column = None
            for col in df.columns:
                if 'skill' in str(col).lower():
                    skill_column = col
                    break
            if skill_column is None:
                return "Error: Could not find skill column in the Skills sheet."
            for index, row in df.iterrows():
                skill_name = str(row[skill_column]).strip()
                if (skill_name and skill_name.lower() != 'nan' and skill_name.lower() != 'skill' and not skill_name.startswith('#')):
                    return f"The first skill in the Skills sheet is '{skill_name}'."
            return "Error: No skills found in the Skills sheet."
        except Exception as e:
            return f"Error reading Skills sheet: {str(e)}"

    def _get_skill_count_answer(self, file_path: str) -> str:
        try:
            df = pd.read_excel(file_path, sheet_name='Skills')
            skill_column = None
            for col in df.columns:
                if 'skill' in str(col).lower():
                    skill_column = col
                    break
            if skill_column is None:
                return "Error: Could not find skill column in the Skills sheet."
            skill_count = 0
            for index, row in df.iterrows():
                skill_name = str(row[skill_column]).strip()
                if (skill_name and skill_name.lower() != 'nan' and skill_name.lower() != 'skill' and not skill_name.startswith('#')):
                    skill_count += 1
            return f"There are {skill_count} skills in the Skills sheet."
        except Exception as e:
            return f"Error reading Skills sheet: {str(e)}"

    def _get_specific_skill_answer(self, question: str, file_path: str) -> str:
        # This could be implemented to handle specific skill lookups
        return "Direct answer not available for this specific question."

    def validate_ai_answer(self, ai_answer: str, question: str, file_path: str) -> Dict[str, Any]:
        question_lower = question.lower()
        direct_answer = self.get_direct_answer(question, file_path)
        if direct_answer and not direct_answer.startswith("Error"):
            ai_key = self._extract_key_info(ai_answer)
            direct_key = self._extract_key_info(direct_answer)
            is_correct = ai_key.lower() == direct_key.lower()
            return {
                "ai_answer": ai_answer,
                "direct_answer": direct_answer,
                "is_correct": is_correct,
                "ai_key": ai_key,
                "direct_key": direct_key,
                "validation_available": True
            }
        return {
            "ai_answer": ai_answer,
            "direct_answer": direct_answer,
            "is_correct": None,
            "validation_available": False
        }

    def _extract_key_info(self, answer: str) -> str:
        if "first skill" in answer.lower():
            import re
            matches = re.findall(r"'([^']+)'", answer)
            if matches:
                return matches[0]
            if "is " in answer.lower():
                parts = answer.split("is ")
                if len(parts) > 1:
                    skill_part = parts[1].split(".")[0].strip()
                    return skill_part
        return answer 