# Generated by AI on 2024-12-19
# Reviewed by: AI Assistant
# Ticket: SFIA-003

# Layer: application
# Responsibility: Handle Excel structure queries directly without AI confusion
# Public API: ExcelStructureService.get_sheet_count(), ExcelStructureService.get_sheet_names()

import os
from typing import List, Dict, Any, Optional
import openpyxl


class ExcelStructureService:
    """Application service for direct Excel structure analysis."""
    
    def __init__(self) -> None:
        """Initialize the Excel structure service."""
        pass
    
    def get_sheet_count(self, file_path: str) -> int:
        """
        Get the exact number of sheets in an Excel file.
        
        Args:
            file_path: Path to the Excel file
            
        Returns:
            Number of sheets in the file
            
        Raises:
            FileNotFoundError: If the file doesn't exist
            ValueError: If the file is not a valid Excel file
        """
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Excel file not found: {file_path}")
        
        if not file_path.lower().endswith(('.xlsx', '.xls')):
            raise ValueError(f"File must be an Excel file (.xlsx or .xls): {file_path}")
        
        try:
            wb = openpyxl.load_workbook(file_path)
            return len(wb.sheetnames)
        except Exception as e:
            raise ValueError(f"Failed to read Excel file {file_path}: {str(e)}")
    
    def get_sheet_names(self, file_path: str) -> List[str]:
        """
        Get the names of all sheets in an Excel file.
        
        Args:
            file_path: Path to the Excel file
            
        Returns:
            List of sheet names
            
        Raises:
            FileNotFoundError: If the file doesn't exist
            ValueError: If the file is not a valid Excel file
        """
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Excel file not found: {file_path}")
        
        if not file_path.lower().endswith(('.xlsx', '.xls')):
            raise ValueError(f"File must be an Excel file (.xlsx or .xls): {file_path}")
        
        try:
            wb = openpyxl.load_workbook(file_path)
            return wb.sheetnames
        except Exception as e:
            raise ValueError(f"Failed to read Excel file {file_path}: {str(e)}")
    
    def get_excel_structure_info(self, file_path: str) -> Dict[str, Any]:
        """
        Get comprehensive Excel structure information.
        
        Args:
            file_path: Path to the Excel file
            
        Returns:
            Dictionary with Excel structure information
        """
        sheet_count = self.get_sheet_count(file_path)
        sheet_names = self.get_sheet_names(file_path)
        
        return {
            "file_path": file_path,
            "sheet_count": sheet_count,
            "sheet_names": sheet_names,
            "structure_summary": f"Excel file contains {sheet_count} sheets: {', '.join(sheet_names)}"
        }
    
    def is_sheet_count_question(self, question: str) -> bool:
        """
        Check if the question is asking about sheet count.
        
        Args:
            question: The question to analyze
            
        Returns:
            True if the question is about sheet count
        """
        question_lower = question.lower()
        sheet_keywords = [
            "how many sheets",
            "number of sheets", 
            "sheet count",
            "how many tabs",
            "number of tabs",
            "tab count",
            "how many worksheets",
            "number of worksheets"
        ]
        
        return any(keyword in question_lower for keyword in sheet_keywords)
    
    def get_direct_answer(self, question: str, file_path: str) -> str:
        """
        Get a direct answer for Excel structure questions.
        
        Args:
            question: The question to answer
            file_path: Path to the Excel file
            
        Returns:
            Direct answer based on Excel structure
        """
        if self.is_sheet_count_question(question):
            sheet_count = self.get_sheet_count(file_path)
            sheet_names = self.get_sheet_names(file_path)
            
            return f"The Excel file contains exactly {sheet_count} sheets: {', '.join(sheet_names)}"
        
        # For other questions, return None to let AI handle
        return None 