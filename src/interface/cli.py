# Generated by AI on 2024-12-19
# Reviewed by: AI Assistant
# Ticket: SFIA-001

# Layer: interface
# Responsibility: Handle CLI interactions and coordinate application services
# Public API: main()

import sys
import os
import argparse
from typing import Optional

from ..application.services.document_service import DocumentService
from ..application.services.qa_service import QAService
from ..infrastructure.persistence.haystack_document_store import HaystackDocumentStore
from ..infrastructure.ml.ollama_generator import OllamaGenerator


def main() -> None:
    """Main CLI entry point."""
    parser = argparse.ArgumentParser(
        description="SFIA - Semantic File Information Assistant"
    )
    parser.add_argument(
        "query", 
        nargs="?", 
        default="What is your favorite season?",
        help="Question to ask (default: 'What is your favorite season?')"
    )
    parser.add_argument(
        "--doc-folder", 
        type=str,
        help="Folder containing documents to load (.txt and .xlsx files)"
    )
    parser.add_argument(
        "--debug", 
        action="store_true",
        help="Enable debug mode to show retrieved documents"
    )
    parser.add_argument(
        "--model", 
        type=str,
        default="llama3.2:latest",
        help="Ollama model to use (default: llama3.2:latest)"
    )
    parser.add_argument(
        "--url", 
        type=str,
        default="http://localhost:11434",
        help="Ollama server URL (default: http://localhost:11434)"
    )
    parser.add_argument(
        "--top-k", 
        type=int,
        default=10,
        help="Number of documents to retrieve (default: 10)"
    )
    
    args = parser.parse_args()
    
    try:
        # Initialize infrastructure components
        document_store = HaystackDocumentStore()
        llm_generator = OllamaGenerator(
            model=args.model,
            url=args.url
        )
        
        # Initialize application services
        document_service = DocumentService(document_store)
        qa_service = QAService(document_store, llm_generator)
        
        # Check if we should use page-by-page Excel processing
        if args.doc_folder and any(f.endswith(('.xlsx', '.xls')) for f in os.listdir(args.doc_folder)):
            excel_files = [f for f in os.listdir(args.doc_folder) if f.endswith(('.xlsx', '.xls'))]
            if excel_files:
                excel_file_path = os.path.join(args.doc_folder, excel_files[0])
                print(f"Processing Excel file page by page: {excel_files[0]}")
                print()
                
                # Use page-by-page processing
                response = qa_service.ask_question_excel_page_by_page(args.query, excel_file_path)
                
                # Handle debug mode
                if args.debug:
                    print(f"\n[DEBUG] Sheets processed: {response.metadata.get('sheets_processed', 0)}")
                    print(f"[DEBUG] Total sheets: {response.metadata.get('total_sheets', 0)}")
                
                # Print response
                print(f"\nAnswer: {response.content}")
                return
        
        # Fallback to regular document processing
        if args.doc_folder:
            documents = document_service.load_from_folder(args.doc_folder)
            if not documents:
                print(f"No .txt or Excel files found in {args.doc_folder}")
                return
            print(f"Loaded {len(documents)} documents from {args.doc_folder}")
        
        # Ask question
        response = qa_service.ask_question(args.query, top_k=args.top_k)
        
        # Handle debug mode
        if args.debug:
            retrieved_docs = qa_service.get_retrieved_documents(args.query, top_k=args.top_k)
            print("\n[DEBUG] Retrieved Documents:")
            for i, doc in enumerate(retrieved_docs, 1):
                print(f"{i}. {doc.content[:100]}...")
            print(f"\n[DEBUG] Response metadata: {response.metadata}")
        
        # Print response
        print(f"\nAnswer: {response.content}")
        
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main() 