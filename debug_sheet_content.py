# Generated by AI on 2024-12-19
# Reviewed by: AI Assistant
# Ticket: SFIA-003

# Debug script to examine sheet content and understand AI confusion

import os
import sys
from pathlib import Path

# Add src to path for imports
current_dir = Path(__file__).parent
src_path = current_dir / "src"
sys.path.insert(0, str(src_path))

from src.infrastructure.persistence.haystack_xlsx_converter import HaystackXlsxConverter
from src.application.services.qa_service import QAService
from src.infrastructure.persistence.haystack_document_store import HaystackDocumentStore
from src.infrastructure.ml.ollama_generator import OllamaGenerator


def debug_sheet_content():
    """Debug what content is being sent to the AI."""
    print("üîç DEBUGGING SHEET CONTENT AND AI CONFUSION")
    print("=" * 60)
    
    excel_file = "doc/sfia-9_current-standard_en_250129.xlsx"
    
    if not os.path.exists(excel_file):
        print(f"‚ùå Excel file not found: {excel_file}")
        return
    
    # 1. Check actual sheet structure
    print("üìä STEP 1: Actual Excel Structure")
    print("-" * 40)
    
    import openpyxl
    wb = openpyxl.load_workbook(excel_file)
    actual_sheets = wb.sheetnames
    
    print(f"‚úÖ ACTUAL SHEETS: {len(actual_sheets)}")
    for i, name in enumerate(actual_sheets, 1):
        print(f"   {i}. {name}")
    print()
    
    # 2. Check what Haystack converter produces
    print("üîÑ STEP 2: Haystack Converter Output")
    print("-" * 40)
    
    converter = HaystackXlsxConverter()
    documents = converter.convert_file(excel_file)
    
    print(f"üìÑ DOCUMENTS PRODUCED: {len(documents)}")
    for i, doc in enumerate(documents, 1):
        sheet_name = doc.metadata.get('xlsx', {}).get('sheet_name', 'Unknown')
        content_preview = doc.content[:200].replace('\n', '\\n')
        print(f"   {i}. Sheet: {sheet_name}")
        print(f"      Content preview: {content_preview}...")
        print()
    
    # 3. Check what content might be confusing the AI
    print("ü§î STEP 3: Potential Confusing Content")
    print("-" * 40)
    
    for i, doc in enumerate(documents, 1):
        sheet_name = doc.metadata.get('xlsx', {}).get('sheet_name', 'Unknown')
        content = doc.content.lower()
        
        # Look for numbers that might be confused with sheet count
        import re
        numbers = re.findall(r'\b\d+\b', content)
        
        # Look for "sheet" mentions
        sheet_mentions = content.count('sheet')
        
        print(f"üìÑ Sheet {i}: {sheet_name}")
        print(f"   Numbers found: {numbers[:10]}...")  # First 10 numbers
        print(f"   'Sheet' mentions: {sheet_mentions}")
        
        # Look for specific patterns that might confuse AI
        if '16' in content:
            print(f"   ‚ö†Ô∏è  Contains '16' - might be confusing AI!")
        if '14' in content:
            print(f"   ‚ö†Ô∏è  Contains '14' - might be confusing AI!")
        if 'level' in content and any(num in content for num in ['1', '2', '3', '4', '5', '6', '7']):
            print(f"   ‚ö†Ô∏è  Contains level numbers - might be confused with sheet count!")
        print()
    
    # 4. Test with a very specific prompt
    print("üß™ STEP 4: Testing with Specific Prompt")
    print("-" * 40)
    
    # Initialize services
    document_store = HaystackDocumentStore()
    llm_generator = OllamaGenerator(model="mistral:latest")
    qa_service = QAService(document_store, llm_generator)
    
    # Load documents
    from src.application.services.document_service import DocumentService
    document_service = DocumentService(document_store, use_haystack=True)
    documents = document_service.load_from_folder("doc", use_haystack=True)
    
    print(f"üìö Loaded {len(documents)} documents")
    
    # Test with a very specific prompt
    specific_prompt = "Count ONLY the number of Excel sheets (tabs) in the file. Do not count anything else. Just count the sheets/tabs."
    
    print(f"üîç Testing with prompt: '{specific_prompt}'")
    
    try:
        response = qa_service.ask_question(specific_prompt, top_k=5)
        print(f"ü§ñ AI Response: {response.content}")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    print("\n" + "=" * 60)
    print("üí° ANALYSIS:")
    print("=" * 60)
    print("The issue appears to be that the AI is getting confused by:")
    print("1. Numbers within the sheet content (like level numbers 1-7)")
    print("2. References to 'sheets' within the content")
    print("3. The AI is interpreting content as sheet count rather than structure")
    print()
    print("üéØ SOLUTION SUGGESTIONS:")
    print("1. Use more specific prompts about Excel structure")
    print("2. Pre-process content to remove confusing numbers")
    print("3. Add metadata about actual sheet count")
    print("4. Use structured queries instead of natural language")


if __name__ == "__main__":
    debug_sheet_content() 