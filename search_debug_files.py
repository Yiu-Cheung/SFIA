# Generated by AI on 2024-12-19
# Reviewed by: AI Assistant
# Ticket: SFIA-002

"""
Script to search for specific content in debug files
"""

import os
import glob

def search_in_debug_files(search_term: str, debug_folder: str = "doc/.converted"):
    """Search for a term in all debug files."""
    print(f"🔍 Searching for '{search_term}' in debug files...")
    print("=" * 60)
    
    # Get all markdown files in debug folder
    pattern = os.path.join(debug_folder, "*.markdown")
    debug_files = glob.glob(pattern)
    
    if not debug_files:
        print(f"No debug files found in {debug_folder}")
        return
    
    print(f"Found {len(debug_files)} debug files:")
    for file in debug_files:
        print(f"  - {os.path.basename(file)}")
    
    print("\n" + "=" * 60)
    
    # Search in each file
    for file_path in debug_files:
        filename = os.path.basename(file_path)
        print(f"\n📄 Searching in: {filename}")
        print("-" * 40)
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # Check if search term exists
            if search_term in content:
                print(f"✅ Found '{search_term}' in {filename}")
                
                # Find the specific lines containing the search term
                lines = content.split('\n')
                for i, line in enumerate(lines, 1):
                    if search_term in line:
                        print(f"Line {i}: {line.strip()}")
                        
                        # Show context (next few lines)
                        for j in range(i, min(i+5, len(lines))):
                            if lines[j].strip() and not lines[j].strip().startswith('#'):
                                print(f"Line {j+1}: {lines[j].strip()}")
                        print()
            else:
                print(f"❌ '{search_term}' not found in {filename}")
                
        except Exception as e:
            print(f"Error reading {filename}: {e}")

def show_file_info(debug_folder: str = "doc/.converted"):
    """Show information about debug files."""
    print("📊 DEBUG FILES INFORMATION")
    print("=" * 60)
    
    pattern = os.path.join(debug_folder, "*.markdown")
    debug_files = glob.glob(pattern)
    
    for file_path in debug_files:
        filename = os.path.basename(file_path)
        size = os.path.getsize(file_path)
        size_mb = size / (1024 * 1024)
        
        print(f"\n📄 {filename}")
        print(f"   Size: {size_mb:.2f} MB ({size:,} bytes)")
        
        # Read header info
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                header_lines = []
                for i, line in enumerate(f):
                    if line.startswith('# ') and ':' in line:
                        header_lines.append(line.strip())
                    if i >= 10:  # Only read first 10 lines
                        break
                
                for line in header_lines:
                    print(f"   {line}")
                    
        except Exception as e:
            print(f"   Error reading header: {e}")

if __name__ == "__main__":
    # Show file information
    show_file_info()
    
    print("\n" + "=" * 60)
    
    # Search for Strategic planning
    search_in_debug_files("Strategic planning") 