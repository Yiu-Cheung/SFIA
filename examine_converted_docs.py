# Generated by AI on 2024-12-19
# Reviewed by: AI Assistant
# Ticket: SFIA-002

"""
Script to examine the converted documents and their structure
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.infrastructure.persistence.xlsx_document_converter import XLSXDocumentConverter
from src.application.services.document_service import DocumentService
from src.infrastructure.persistence.haystack_document_store import HaystackDocumentStore


def examine_converted_documents():
    """Examine the converted documents in detail."""
    print("🔍 EXAMINING CONVERTED DOCUMENTS")
    print("=" * 60)
    
    # Initialize converter and convert the file
    converter = XLSXDocumentConverter(
        table_format="markdown",
        read_excel_kwargs={"skiprows": 0, "na_filter": False},
        table_format_kwargs={"index": False},
        store_full_path=True
    )
    
    xlsx_file = "doc/sfia-9_current-standard_en_250129.xlsx"
    
    print(f"📄 Converting: {xlsx_file}")
    documents = converter.convert_file(xlsx_file)
    
    print(f"\n✅ Converted {len(documents)} documents")
    print("\n" + "=" * 60)
    
    # Examine each document
    for i, doc in enumerate(documents, 1):
        print(f"\n📋 DOCUMENT {i}:")
        print("-" * 40)
        print(f"Metadata: {doc.metadata}")
        print(f"Content length: {len(doc.content)} characters")
        print(f"Content preview (first 500 chars):")
        print("-" * 20)
        print(doc.content[:500])
        print("-" * 20)
        
        # Check if this document contains Strategic planning
        if "Strategic planning" in doc.content:
            print("🎯 FOUND 'Strategic planning' in this document!")
            print("Full content:")
            print(doc.content)
            print("-" * 40)
        
        if i >= 3:  # Show first 3 documents in detail
            break
    
    if len(documents) > 3:
        print(f"\n... and {len(documents) - 3} more documents")
    
    return documents


def examine_document_store():
    """Examine documents stored in the document store."""
    print("\n\n🏪 EXAMINING DOCUMENT STORE")
    print("=" * 60)
    
    # Initialize services
    document_store = HaystackDocumentStore()
    document_service = DocumentService(document_store)
    
    # Load documents
    print("📁 Loading documents into store...")
    documents = document_service.load_from_folder("doc")
    
    print(f"✅ Loaded {len(documents)} documents into store")
    
    # Search for Strategic planning
    print("\n🔍 Searching for 'Strategic planning'...")
    from src.domain.models.query import Query
    query = Query("Strategic planning")
    results = document_store.search(query, top_k=5)
    
    print(f"Found {len(results)} relevant documents:")
    for i, doc in enumerate(results, 1):
        print(f"\n📄 Result {i}:")
        print(f"Metadata: {doc.metadata}")
        print(f"Content preview: {doc.content[:300]}...")
        
        if "Strategic planning" in doc.content:
            print("🎯 Contains 'Strategic planning'!")
            # Find the specific skill entry
            lines = doc.content.split('\n')
            for j, line in enumerate(lines):
                if "Strategic planning" in line:
                    print(f"Line {j+1}: {line}")
                    # Show next few lines for context
                    for k in range(j+1, min(j+10, len(lines))):
                        if lines[k].strip():
                            print(f"Line {k+1}: {lines[k]}")


def main():
    """Main function to examine converted documents."""
    print("🧪 DOCUMENT CONVERSION EXAMINATION")
    print("=" * 60)
    
    # Examine converted documents
    documents = examine_converted_documents()
    
    # Examine document store
    examine_document_store()
    
    print("\n" + "=" * 60)
    print("📊 SUMMARY:")
    print("-" * 30)
    print("• Documents are converted to markdown format")
    print("• Stored in Haystack InMemoryDocumentStore")
    print("• Searchable using BM25 retrieval")
    print("• Each sheet becomes a separate document")
    print("• Metadata includes source file and sheet information")

if __name__ == "__main__":
    main() 