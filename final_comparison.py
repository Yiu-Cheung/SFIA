# Generated by AI on 2024-12-19
# Reviewed by: AI Assistant
# Ticket: SFIA-003

"""
Final comparison script to show the improvement with structured format
"""

import json
import os

def get_actual_strategic_planning_level4():
    """Get the actual Level 4 description for Strategic planning from the JSON file."""
    json_file = "doc/.converted/sfia-9_current-standard_en_250129_Strategic_planning.json"
    
    if not os.path.exists(json_file):
        return "JSON file not found"
    
    try:
        with open(json_file, 'r', encoding='utf-8') as f:
            content = f.read()
            # Extract JSON content (skip header)
            json_start = content.find('{')
            if json_start != -1:
                json_content = content[json_start:]
                data = json.loads(json_content)
                return data.get("level_descriptions", {}).get("level_4", "Not found")
    except Exception as e:
        return f"Error reading JSON: {e}"
    
    return "Not found"

def main():
    print("🔍 FINAL COMPARISON: Strategic Planning Level 4 Description")
    print("=" * 80)
    
    # App's answer with structured format
    app_answer_structured = "Performs demand management analysis and planning activities within a specific business or operational area. Monitors patterns of demand and identifies insights and proposals to improve business value. Identifies and assesses opportunities to prioritise or improve alignment between business demand and capacity to deliver. Engages stakeholders to communicate insights, plans and decisions regarding business demand."
    
    # Previous app answer (markdown format)
    app_answer_markdown = "Enables others to adapt and change in response to challenges and changes in the work environment."
    
    # Actual document content from JSON
    actual_content = get_actual_strategic_planning_level4()
    
    print("\n📱 APP'S ANSWER (MARKDOWN FORMAT):")
    print("-" * 50)
    print(app_answer_markdown)
    
    print("\n📱 APP'S ANSWER (STRUCTURED JSON FORMAT):")
    print("-" * 50)
    print(app_answer_structured)
    
    print("\n📄 ACTUAL DOCUMENT CONTENT (JSON):")
    print("-" * 50)
    print(actual_content)
    
    print("\n" + "=" * 80)
    print("📊 ANALYSIS:")
    print("-" * 50)
    
    # Compare with actual content
    if actual_content in app_answer_structured:
        print("✅ Structured format: PARTIALLY correct - contains actual content")
    elif app_answer_structured in actual_content:
        print("✅ Structured format: MORE DETAILED than actual content")
    else:
        print("❌ Structured format: INCORRECT - doesn't match actual content")
    
    if actual_content in app_answer_markdown:
        print("✅ Markdown format: PARTIALLY correct - contains actual content")
    elif app_answer_markdown in actual_content:
        print("✅ Markdown format: MORE DETAILED than actual content")
    else:
        print("❌ Markdown format: INCORRECT - doesn't match actual content")
    
    print(f"\n📏 Length comparison:")
    print(f"   Markdown answer: {len(app_answer_markdown)} characters")
    print(f"   Structured answer: {len(app_answer_structured)} characters")
    print(f"   Actual content: {len(actual_content)} characters")
    
    print(f"\n🎯 IMPROVEMENTS ACHIEVED:")
    print("-" * 30)
    print("✅ Converted 149 individual skill documents (vs 4 large tables)")
    print("✅ Each skill is now a separate JSON document")
    print("✅ Structured data with clear level descriptions")
    print("✅ Better metadata with skill codes and categories")
    print("✅ Debug files saved for examination")
    
    print(f"\n🔧 REMAINING ISSUES:")
    print("-" * 30)
    print("❌ LLM still not extracting correct information")
    print("❌ App providing wrong skill description (Demand management vs Strategic planning)")
    print("❌ Need to improve prompt engineering for JSON parsing")
    print("❌ Consider skill-specific search indexing")

if __name__ == "__main__":
    main() 