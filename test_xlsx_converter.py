# Generated by AI on 2024-12-19
# Reviewed by: AI Assistant
# Ticket: SFIA-002

"""
Test script for the new XLSX Document Converter
Tests the optimized Haystack-based XLSX to Document conversion
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.infrastructure.persistence.xlsx_document_converter import XLSXDocumentConverter
from src.application.services.document_service import DocumentService
from src.infrastructure.persistence.haystack_document_store import HaystackDocumentStore


def test_xlsx_converter():
    """Test the XLSX converter with the SFIA document."""
    print("Testing XLSX Document Converter...")
    print("=" * 50)
    
    # Initialize converter
    converter = XLSXDocumentConverter(
        table_format="markdown",
        read_excel_kwargs={"skiprows": 0, "na_filter": False},
        table_format_kwargs={"index": False},
        store_full_path=True
    )
    
    # Test file path
    xlsx_file = "doc/sfia-9_current-standard_en_250129.xlsx"
    
    if not os.path.exists(xlsx_file):
        print(f"❌ Test file not found: {xlsx_file}")
        return False
    
    try:
        # Convert the file
        print(f"📄 Converting: {xlsx_file}")
        documents = converter.convert_file(xlsx_file)
        
        print(f"✅ Successfully converted {len(documents)} documents")
        
        # Display sample documents
        for i, doc in enumerate(documents[:3]):  # Show first 3 documents
            print(f"\n📋 Document {i+1}:")
            print(f"   Metadata: {doc.metadata}")
            print(f"   Content preview: {doc.content[:200]}...")
            print("-" * 30)
        
        if len(documents) > 3:
            print(f"... and {len(documents) - 3} more documents")
        
        return True
        
    except Exception as e:
        print(f"❌ Error during conversion: {e}")
        return False


def test_document_service():
    """Test the updated DocumentService with the new converter."""
    print("\nTesting DocumentService with new converter...")
    print("=" * 50)
    
    try:
        # Initialize services
        document_store = HaystackDocumentStore()
        document_service = DocumentService(document_store)
        
        # Load documents from folder
        print("📁 Loading documents from 'doc' folder...")
        documents = document_service.load_from_folder("doc")
        
        print(f"✅ Successfully loaded {len(documents)} documents")
        
        # Display sample documents
        for i, doc in enumerate(documents[:2]):  # Show first 2 documents
            print(f"\n📋 Document {i+1}:")
            print(f"   Metadata: {doc.metadata}")
            print(f"   Content preview: {doc.content[:300]}...")
            print("-" * 30)
        
        return True
        
    except Exception as e:
        print(f"❌ Error in DocumentService: {e}")
        return False


if __name__ == "__main__":
    print("🧪 XLSX Converter Test Suite")
    print("=" * 50)
    
    # Test 1: Direct converter
    success1 = test_xlsx_converter()
    
    # Test 2: DocumentService integration
    success2 = test_document_service()
    
    print("\n" + "=" * 50)
    if success1 and success2:
        print("🎉 All tests passed! The XLSX converter is working correctly.")
    else:
        print("❌ Some tests failed. Please check the errors above.") 