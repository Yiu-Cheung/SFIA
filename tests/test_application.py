# Generated by AI on 2024-12-19
# Reviewed by: AI Assistant
# Ticket: SFIA-001

"""
Unit tests for application layer.
"""

import pytest
import os
import tempfile
from unittest.mock import Mock, patch, MagicMock

from src.domain.models.document import Document
from src.domain.models.query import Query
from src.domain.models.response import Response
from src.application.services.document_service import DocumentService
from src.application.services.qa_service import QAService


class TestDocumentService:
    """Test cases for DocumentService."""
    
    def test_initialization(self):
        """Test service initialization."""
        mock_repository = Mock()
        service = DocumentService(mock_repository)
        assert service is not None
        assert service._document_repository == mock_repository
    
    def test_load_from_folder_not_found(self):
        """Test loading from non-existent folder."""
        mock_repository = Mock()
        service = DocumentService(mock_repository)
        
        with pytest.raises(FileNotFoundError, match="Folder not found"):
            service.load_from_folder("non_existent_folder")
    
    @patch('builtins.open', create=True)
    def test_load_txt_file(self, mock_open):
        """Test loading text file."""
        mock_repository = Mock()
        service = DocumentService(mock_repository)
        
        # Mock file content
        mock_open.return_value.__enter__.return_value.read.return_value = "Test content"
        
        documents = service._load_txt_file("test.txt")
        
        assert len(documents) == 1
        assert documents[0].content == "Test content"
        assert documents[0].metadata["source"] == "test.txt"
        assert documents[0].metadata["type"] == "txt"
    
    @patch('builtins.open', create=True)
    def test_load_txt_file_empty(self, mock_open):
        """Test loading empty text file."""
        mock_repository = Mock()
        service = DocumentService(mock_repository)
        
        # Mock empty file content
        mock_open.return_value.__enter__.return_value.read.return_value = ""
        
        documents = service._load_txt_file("test.txt")
        
        assert len(documents) == 0
    
    @patch('pandas.read_excel')
    def test_load_excel_file(self, mock_read_excel):
        """Test loading Excel file."""
        mock_repository = Mock()
        service = DocumentService(mock_repository)
        
        # Mock DataFrame with proper iteration
        mock_df = Mock()
        mock_df.columns = ["Test Column"]
        # Mock the column access and iteration properly
        mock_column = ["Content 1", "Content 2", "nan"]
        mock_df.__getitem__ = Mock(return_value=mock_column)
        mock_df.__len__ = Mock(return_value=len(mock_column))
        mock_read_excel.return_value = mock_df
        
        documents = service._load_excel_file("test.xlsx")
        
        assert len(documents) == 1  # Should combine into one document
        assert "Content 1" in documents[0].content
        assert "Content 2" in documents[0].content
        assert documents[0].metadata["source"] == "test.xlsx"
        assert documents[0].metadata["type"] == "excel"
    
    @patch('pandas.read_excel')
    def test_load_excel_file_empty(self, mock_read_excel):
        """Test loading empty Excel file."""
        mock_repository = Mock()
        service = DocumentService(mock_repository)
        
        # Mock empty DataFrame
        mock_df = Mock()
        mock_df.columns = ["Test Column"]
        # Mock the column access properly
        mock_df.__getitem__ = Mock(return_value=["nan", "nan"])
        mock_read_excel.return_value = mock_df
        
        documents = service._load_excel_file("test.xlsx")
        
        assert len(documents) == 0
    
    def test_get_documents(self):
        """Test getting documents from repository."""
        mock_repository = Mock()
        mock_documents = [Document(content="test")]
        mock_repository.search.return_value = mock_documents
        
        service = DocumentService(mock_repository)
        documents = service.get_documents()
        
        assert documents == mock_documents
        mock_repository.search.assert_called_once()
        # Verify it was called with a non-empty query
        call_args = mock_repository.search.call_args
        assert call_args[0][0].text != ""


class TestQAService:
    """Test cases for QAService."""
    
    def test_initialization(self):
        """Test service initialization."""
        mock_repository = Mock()
        mock_generator = Mock()
        service = QAService(mock_repository, mock_generator)
        
        assert service is not None
        assert service._document_repository == mock_repository
        assert service._llm_generator == mock_generator
    
    def test_ask_question(self):
        """Test asking a question."""
        mock_repository = Mock()
        mock_generator = Mock()
        
        # Mock repository response
        mock_documents = [Document(content="test context")]
        mock_repository.search.return_value = mock_documents
        
        # Mock generator response
        mock_response = Response(content="test answer")
        mock_generator.generate.return_value = mock_response
        
        service = QAService(mock_repository, mock_generator)
        response = service.ask_question("test question", top_k=5)
        
        assert response == mock_response
        mock_repository.search.assert_called_once()
        mock_generator.generate.assert_called_once()
    
    def test_get_retrieved_documents(self):
        """Test getting retrieved documents."""
        mock_repository = Mock()
        mock_generator = Mock()
        mock_documents = [Document(content="test context")]
        mock_repository.search.return_value = mock_documents
        
        service = QAService(mock_repository, mock_generator)
        documents = service.get_retrieved_documents("test question", top_k=5)
        
        assert documents == mock_documents
        mock_repository.search.assert_called_once() 