# Generated by AI on 2024-12-19
# Reviewed by: AI Assistant
# Ticket: SFIA-001

"""
Unit tests for interface layer.
"""

import pytest
import sys
from unittest.mock import Mock, patch, MagicMock
from io import StringIO

from src.interface.cli import main


class TestCLI:
    """Test cases for CLI interface."""
    
    def test_cli_import(self):
        """Test that CLI can be imported."""
        from src.interface.cli import main
        assert main is not None
        assert callable(main)
    
    @patch('sys.argv', ['main.py', '--help'])
    @patch('sys.stdout', new_callable=StringIO)
    def test_cli_help(self, mock_stdout):
        """Test CLI help functionality."""
        try:
            main()
        except SystemExit:
            pass
        
        output = mock_stdout.getvalue()
        assert "SFIA - Semantic File Information Assistant" in output
        assert "usage:" in output
        assert "--help" in output
    
    @patch('sys.argv', ['main.py', 'test question'])
    @patch('src.interface.cli.HaystackDocumentStore')
    @patch('src.interface.cli.OllamaGenerator')
    @patch('src.interface.cli.DocumentService')
    @patch('src.interface.cli.QAService')
    def test_cli_basic_question(self, mock_qa_service, mock_doc_service, mock_generator, mock_store):
        """Test CLI with basic question."""
        # Mock the services
        mock_store_instance = Mock()
        mock_store.return_value = mock_store_instance
        
        mock_generator_instance = Mock()
        mock_generator.return_value = mock_generator_instance
        
        mock_doc_service_instance = Mock()
        mock_doc_service.return_value = mock_doc_service_instance
        
        mock_qa_service_instance = Mock()
        mock_qa_service.return_value = mock_qa_service_instance
        
        # Mock the response
        from src.domain.models.response import Response
        mock_response = Response(content="test answer")
        mock_qa_service_instance.ask_question.return_value = mock_response
        
        try:
            main()
        except SystemExit:
            pass
        
        # Verify services were called
        mock_qa_service_instance.ask_question.assert_called_once()
    
    @patch('sys.argv', ['main.py', 'test question', '--doc-folder', './test'])
    @patch('src.interface.cli.HaystackDocumentStore')
    @patch('src.interface.cli.OllamaGenerator')
    @patch('src.interface.cli.DocumentService')
    @patch('src.interface.cli.QAService')
    def test_cli_with_doc_folder(self, mock_qa_service, mock_doc_service, mock_generator, mock_store):
        """Test CLI with document folder."""
        # Mock the services
        mock_store_instance = Mock()
        mock_store.return_value = mock_store_instance
        
        mock_generator_instance = Mock()
        mock_generator.return_value = mock_generator_instance
        
        mock_doc_service_instance = Mock()
        mock_doc_service.return_value = mock_doc_service_instance
        
        mock_qa_service_instance = Mock()
        mock_qa_service.return_value = mock_qa_service_instance
        
        # Mock document loading
        from src.domain.models.document import Document
        mock_documents = [Document(content="test document")]
        mock_doc_service_instance.load_from_folder.return_value = mock_documents
        
        # Mock the response
        from src.domain.models.response import Response
        mock_response = Response(content="test answer")
        mock_qa_service_instance.ask_question.return_value = mock_response
        
        try:
            main()
        except SystemExit:
            pass
        
        # Verify document service was called
        mock_doc_service_instance.load_from_folder.assert_called_once_with('./test')
    
    @patch('sys.argv', ['main.py', 'test question', '--debug'])
    @patch('src.interface.cli.HaystackDocumentStore')
    @patch('src.interface.cli.OllamaGenerator')
    @patch('src.interface.cli.DocumentService')
    @patch('src.interface.cli.QAService')
    def test_cli_debug_mode(self, mock_qa_service, mock_doc_service, mock_generator, mock_store):
        """Test CLI debug mode."""
        # Mock the services
        mock_store_instance = Mock()
        mock_store.return_value = mock_store_instance
        
        mock_generator_instance = Mock()
        mock_generator.return_value = mock_generator_instance
        
        mock_doc_service_instance = Mock()
        mock_doc_service.return_value = mock_doc_service_instance
        
        mock_qa_service_instance = Mock()
        mock_qa_service.return_value = mock_qa_service_instance
        
        # Mock retrieved documents
        from src.domain.models.document import Document
        mock_documents = [Document(content="test context")]
        mock_qa_service_instance.get_retrieved_documents.return_value = mock_documents
        
        # Mock the response
        from src.domain.models.response import Response
        mock_response = Response(content="test answer", metadata={"test": "data"})
        mock_qa_service_instance.ask_question.return_value = mock_response
        
        try:
            main()
        except SystemExit:
            pass
        
        # Verify debug methods were called
        mock_qa_service_instance.get_retrieved_documents.assert_called_once()
    
    @patch('sys.argv', ['main.py'])
    @patch('src.interface.cli.HaystackDocumentStore')
    @patch('src.interface.cli.OllamaGenerator')
    @patch('src.interface.cli.DocumentService')
    @patch('src.interface.cli.QAService')
    def test_cli_default_question(self, mock_qa_service, mock_doc_service, mock_generator, mock_store):
        """Test CLI with default question."""
        # Mock the services
        mock_store_instance = Mock()
        mock_store.return_value = mock_store_instance
        
        mock_generator_instance = Mock()
        mock_generator.return_value = mock_generator_instance
        
        mock_doc_service_instance = Mock()
        mock_doc_service.return_value = mock_doc_service_instance
        
        mock_qa_service_instance = Mock()
        mock_qa_service.return_value = mock_qa_service_instance
        
        # Mock the response
        from src.domain.models.response import Response
        mock_response = Response(content="default answer")
        mock_qa_service_instance.ask_question.return_value = mock_response
        
        try:
            main()
        except SystemExit:
            pass
        
        # Verify default question was asked
        mock_qa_service_instance.ask_question.assert_called_once()
        # Check that default question was used
        call_args = mock_qa_service_instance.ask_question.call_args
        assert "What is your favorite season?" in call_args[0][0] 