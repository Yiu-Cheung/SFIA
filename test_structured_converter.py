# Generated by AI on 2024-12-19
# Reviewed by: AI Assistant
# Ticket: SFIA-003

"""
Test script for the new Structured XLSX Converter
Tests the JSON-based structured conversion for better AI comprehension
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.infrastructure.persistence.structured_xlsx_converter import StructuredXLSXConverter
from src.application.services.document_service import DocumentService
from src.infrastructure.persistence.haystack_document_store import HaystackDocumentStore


def test_structured_converter():
    """Test the structured XLSX converter with the SFIA document."""
    print("Testing Structured XLSX Converter...")
    print("=" * 60)
    
    # Initialize converter
    converter = StructuredXLSXConverter(
        save_debug_files=True,
        debug_folder="doc/.converted",
        output_format="json"
    )
    
    # Test file path
    xlsx_file = "doc/sfia-9_current-standard_en_250129.xlsx"
    
    if not os.path.exists(xlsx_file):
        print(f"❌ Test file not found: {xlsx_file}")
        return False
    
    try:
        # Convert the file
        print(f"📄 Converting: {xlsx_file}")
        documents = converter.convert_file(xlsx_file)
        
        print(f"✅ Successfully converted {len(documents)} documents")
        
        # Find Strategic planning document
        strategic_planning_doc = None
        for doc in documents:
            if doc.metadata.get("skill") == "Strategic planning":
                strategic_planning_doc = doc
                break
        
        if strategic_planning_doc:
            print(f"\n🎯 Found Strategic planning document!")
            print(f"   Metadata: {strategic_planning_doc.metadata}")
            print(f"   Content preview: {strategic_planning_doc.content[:500]}...")
            
            # Check if Level 4 description is in the content
            if "level_4" in strategic_planning_doc.content:
                print("✅ Level 4 description found in structured format!")
            else:
                print("❌ Level 4 description not found")
        else:
            print("❌ Strategic planning document not found")
        
        # Display sample documents
        print(f"\n📋 Sample documents:")
        for i, doc in enumerate(documents[:3]):  # Show first 3 documents
            print(f"\nDocument {i+1}:")
            print(f"   Skill: {doc.metadata.get('skill', 'N/A')}")
            print(f"   Category: {doc.metadata.get('category', 'N/A')}")
            print(f"   Content length: {len(doc.content)} characters")
        
        if len(documents) > 3:
            print(f"... and {len(documents) - 3} more documents")
        
        return True
        
    except Exception as e:
        print(f"❌ Error during conversion: {e}")
        return False


def test_document_service():
    """Test the updated DocumentService with the new structured converter."""
    print("\nTesting DocumentService with structured converter...")
    print("=" * 60)
    
    try:
        # Initialize services
        document_store = HaystackDocumentStore()
        document_service = DocumentService(document_store)
        
        # Load documents from folder
        print("📁 Loading documents from 'doc' folder...")
        documents = document_service.load_from_folder("doc")
        
        print(f"✅ Successfully loaded {len(documents)} documents")
        
        # Find Strategic planning document
        strategic_planning_doc = None
        for doc in documents:
            if doc.metadata.get("skill") == "Strategic planning":
                strategic_planning_doc = doc
                break
        
        if strategic_planning_doc:
            print(f"\n🎯 Found Strategic planning document in store!")
            print(f"   Metadata: {strategic_planning_doc.metadata}")
            print(f"   Content preview: {strategic_planning_doc.content[:300]}...")
            
            # Check if Level 4 description is in the content
            if "level_4" in strategic_planning_doc.content:
                print("✅ Level 4 description found in structured format!")
            else:
                print("❌ Level 4 description not found")
        else:
            print("❌ Strategic planning document not found in store")
        
        return True
        
    except Exception as e:
        print(f"❌ Error in DocumentService: {e}")
        return False


if __name__ == "__main__":
    print("🧪 Structured XLSX Converter Test Suite")
    print("=" * 60)
    
    # Test 1: Direct converter
    success1 = test_structured_converter()
    
    # Test 2: DocumentService integration
    success2 = test_document_service()
    
    print("\n" + "=" * 60)
    if success1 and success2:
        print("🎉 All tests passed! The structured converter is working correctly.")
    else:
        print("❌ Some tests failed. Please check the errors above.") 